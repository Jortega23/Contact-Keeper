{"ast":null,"code":"var _jsxFileName = \"/Users/a/Desktop/GitHub/Contact-Keeper/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CURRENT, FILTER_CONTACTS, CLEAR_FILTER, CLEAR_CONTACTS, CONTACT_ERROR } from '../types'; // set up Contact state with some initial state\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Actions\n  // Add Contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Delete Contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: id\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Update Contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CURRENT,\n      payload: contact\n    });\n  }; // Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // Clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/Users/a/Desktop/GitHub/Contact-Keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","ContactContext","contactReducer","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CURRENT","FILTER_CONTACTS","CLEAR_FILTER","CLEAR_CONTACTS","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","response","msg","addContact","contact","config","headers","post","deleteContact","id","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios'\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport {\n    GET_CONTACTS,\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CURRENT,\n    FILTER_CONTACTS,\n    CLEAR_FILTER,\n    CLEAR_CONTACTS,\n    CONTACT_ERROR\n} from '../types';\n\n// set up Contact state with some initial state\nconst ContactState = props => {\n    const initialState = {\n        contacts: [],\n        current: null,\n        filtered: null,\n        error: null\n    };\n\n    const [state, dispatch] = useReducer(contactReducer, initialState);\n\n    // Get Contacts\n    const getContacts = async () => {\n        try {\n           const res = await axios.get('/api/contacts');\n           dispatch({ type: GET_CONTACTS, payload: res.data });\n        } catch (err) {\n            dispatch({ type: CONTACT_ERROR, payload: err.response.msg})\n        }\n    }\n\n\n    // Actions\n    // Add Contact\n    const addContact = async contact => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n           const res = await axios.post('/api/contacts', contact, config);\n           dispatch({ type: ADD_CONTACT, payload: res.data });\n        } catch (err) {\n            dispatch({ type: CONTACT_ERROR, payload: err.response.msg})\n        }\n    }\n\n    // Delete Contact\n    const deleteContact = id => {\n        dispatch({type: DELETE_CONTACT, payload: id})\n    }\n\n    // Set Current Contact\n    const setCurrent = contact => {\n        dispatch({type: SET_CURRENT, payload:contact});\n    }\n\n    // Clear Current Contact\n    const clearCurrent = () => {\n        dispatch({ type: CLEAR_CURRENT })\n    }\n\n    // Update Contact\n    const updateContact = contact => {\n        dispatch({type: UPDATE_CURRENT, payload: contact });\n    };\n\n    // Filter Contacts\n    const filterContacts = text => {\n        dispatch({ type: FILTER_CONTACTS, payload: text});\n    }\n\n    // Clear filter\n    const clearFilter = () => {\n        dispatch({type: CLEAR_FILTER});\n    }\n\n    return (\n        <ContactContext.Provider \n        value={{ \n            contacts: state.contacts,\n            current: state.current,\n            filtered: state.filtered, \n            error: state.error,\n            addContact,\n            deleteContact,\n            setCurrent,\n            clearCurrent,\n            updateContact,\n            filterContacts,\n            clearFilter\n        }}\n        >\n            { props.children}\n        </ContactContext.Provider>\n    )\n};\n\nexport default ContactState;"]},"metadata":{},"sourceType":"module"}