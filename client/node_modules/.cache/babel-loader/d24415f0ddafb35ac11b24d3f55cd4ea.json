{"ast":null,"code":"var _jsxFileName = \"/Users/a/Desktop/GitHub/Contact-Keeper/client/src/context/auth/AuthState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport AuthContext from './authContext';\nimport authReducer from './authReducer';\nimport setAuthToken from '../../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from '../types'; // set up Auth state with some initial state\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    loading: true,\n    user: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(authReducer, initialState); // Actions\n  // Load user: checking what user is logged in\n\n  const loadUser = async () => {\n    // @todo-load token into global headers\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    try {\n      const res = await axios.get('/api/auth');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; // Register User: sign up and get token back\n\n\n  const register = async formData => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/users', formData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; // Login User\n\n\n  const login = async formData => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/auth', formData, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; // Logout\n\n\n  const logout = () => dispatch({\n    type: LOGOUT\n  }); // Clear errors\n\n\n  const clearErrors = () => {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      user: state.user,\n      error: state.error,\n      register,\n      loadUser,\n      login,\n      logout,\n      clearErrors\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["/Users/a/Desktop/GitHub/Contact-Keeper/client/src/context/auth/AuthState.js"],"names":["React","useReducer","axios","AuthContext","authReducer","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","AuthState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","user","error","state","dispatch","loadUser","res","get","type","payload","data","err","register","formData","config","headers","post","response","msg","login","logout","clearErrors","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios'\nimport AuthContext from './authContext';\nimport authReducer from './authReducer';\nimport setAuthToken from '../../utils/setAuthToken'\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    CLEAR_ERRORS\n} from '../types';\n\n// set up Auth state with some initial state\nconst AuthState = props => {\n    const initialState = {\n        token: localStorage.getItem('token'),\n        isAuthenticated: null,\n        loading: true,\n        user: null,\n        error: null\n    };\n\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    // Actions\n    // Load user: checking what user is logged in\n    const loadUser = async () => {\n        // @todo-load token into global headers\n        if(localStorage.token){\n            setAuthToken(localStorage.token);\n        }\n\n        try {\n            const res = await axios.get('/api/auth');\n\n            dispatch({type: USER_LOADED, payload: res.data });\n        } catch (err) {\n            dispatch({type: AUTH_ERROR});\n        }\n    }\n    // Register User: sign up and get token back\n    const register = async formData => {\n        const config={\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        try {\n            const res = await axios.post('/api/users', formData, config)\n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data\n            })\n\n            loadUser();\n        } catch (err) {\n            dispatch({\n                type: REGISTER_FAIL,\n                payload: err.response.data.msg\n            })\n        }\n    }\n    // Login User\n    const login = async formData => {\n        const config={\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        try {\n            const res = await axios.post('/api/auth', formData, config)\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            })\n\n            loadUser();\n        } catch (err) {\n            dispatch({\n                type: LOGIN_FAIL,\n                payload: err.response.data.msg\n            })\n        }\n    }\n    \n    // Logout\n    const logout = () => dispatch({type: LOGOUT});\n\n    // Clear errors\n    const clearErrors = () => {\n       dispatch({type: CLEAR_ERRORS})\n    }\n    return (\n        <AuthContext.Provider \n        value={{ \n           token: state.token,\n           isAuthenticated: state.isAuthenticated,\n           loading: state.loading,\n           user: state.user,\n           error: state.error,\n           register,\n           loadUser,\n           login,\n           logout,\n           clearErrors\n        }}\n        >\n            { props.children}\n        </AuthContext.Provider>\n    )\n};\n\nexport default AuthState;"]},"metadata":{},"sourceType":"module"}